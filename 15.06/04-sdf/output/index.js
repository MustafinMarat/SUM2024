(function () {
  'use strict';

  window.addEventListener("load", () => {
    const fileInput = document.querySelector("#fileInput");
    fileInput.addEventListener("change", () => {
      let fileUrl = URL.createObjectURL(fileInput.files[0]);

      const myCanvas = document.querySelector('#imageCan');
      let cntx = myCanvas.getContext('2d');

      const image = new Image(30, 47);
      image.src = fileUrl;

      image.onload = () => {
        myCanvas.width = image.naturalWidth;
        myCanvas.height = image.naturalHeight;
    
        
        cntx.drawImage(image, 0, 0);
        
        let arr = cntx.getImageData(0, 0, myCanvas.width, myCanvas.height);
        /*
        for (let i = 0; i < myCanvas.width * myCanvas.height * 4; i += 4) {
          if (arr.data[i] + arr.data[i + 1] + arr.data[i + 2] > 382.5) {
            arr.data[i] = 255;
            arr.data[i + 1] = 255;
            arr.data[i + 2] = 255;  
          } else {
            arr.data[i] = 0;
            arr.data[i + 1] = 0;
            arr.data[i + 2] = 0;
          }         
        } 
        cntx.putImageData(arr, 0, 0);
        */  
       
        for (let i = 0; i < myCanvas.height; i++) { 
          let v = [];
          let z = [0];
          let l = (x) => arr.data[i * myCanvas.width * 4 + x * 4]; 
          for (let j = 0; j < myCanvas.width; j++) {
            if (l(j) == 0) {
              if (v.length == 0)
                v.push(j);
              else {
                let s = (v[v.length - 1] * v[v.length - 1] - j * j) / (2 * v[v.length - 1] - 2 * j);
                if (s > z[z.length - 1]) {
                  z.push(s);
                  v.push(j);
                } else {
                  z.pop();
                  v.pop();
                  j--;
                }
              }  
            }
          }
          
          for (let j = 0; j < myCanvas.width; j++) {
            let k = 1;
            while (j < z[k] && k < z.length)
              k++;

            arr.data[i * myCanvas.width * 4 + j * 4] = 1 / ((v[k] - k) * (v[k] - k) + 1);
            arr.data[i * myCanvas.width * 4 + j * 4 + 1] = 1 / ((v[k] - k) * (v[k] - k) + 1);
            arr.data[i * myCanvas.width * 4 + j * 4 + 2] = 1 / ((v[k] - k) * (v[k] - k) + 1);
          }
        }

        cntx.putImageData(arr, 0, 0);
      };    
    });
  });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XHJcbiAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaWxlSW5wdXRcIik7XHJcbiAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgbGV0IGZpbGVVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGVJbnB1dC5maWxlc1swXSk7XHJcblxyXG4gICAgY29uc3QgbXlDYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW1hZ2VDYW4nKTtcclxuICAgIGxldCBjbnR4ID0gbXlDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgzMCwgNDcpO1xyXG4gICAgaW1hZ2Uuc3JjID0gZmlsZVVybDtcclxuXHJcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIG15Q2FudmFzLndpZHRoID0gaW1hZ2UubmF0dXJhbFdpZHRoO1xyXG4gICAgICBteUNhbnZhcy5oZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0O1xyXG4gIFxyXG4gICAgICBcclxuICAgICAgY250eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgICBcclxuICAgICAgbGV0IGFyciA9IGNudHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG15Q2FudmFzLndpZHRoLCBteUNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAvKlxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG15Q2FudmFzLndpZHRoICogbXlDYW52YXMuaGVpZ2h0ICogNDsgaSArPSA0KSB7XHJcbiAgICAgICAgaWYgKGFyci5kYXRhW2ldICsgYXJyLmRhdGFbaSArIDFdICsgYXJyLmRhdGFbaSArIDJdID4gMzgyLjUpIHtcclxuICAgICAgICAgIGFyci5kYXRhW2ldID0gMjU1O1xyXG4gICAgICAgICAgYXJyLmRhdGFbaSArIDFdID0gMjU1O1xyXG4gICAgICAgICAgYXJyLmRhdGFbaSArIDJdID0gMjU1OyAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFyci5kYXRhW2ldID0gMDtcclxuICAgICAgICAgIGFyci5kYXRhW2kgKyAxXSA9IDA7XHJcbiAgICAgICAgICBhcnIuZGF0YVtpICsgMl0gPSAwO1xyXG4gICAgICAgIH0gICAgICAgICBcclxuICAgICAgfSBcclxuICAgICAgY250eC5wdXRJbWFnZURhdGEoYXJyLCAwLCAwKTtcclxuICAgICAgKi8gIFxyXG4gICAgIFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG15Q2FudmFzLmhlaWdodDsgaSsrKSB7IFxyXG4gICAgICAgIGxldCB2ID0gW107XHJcbiAgICAgICAgbGV0IHogPSBbMF07XHJcbiAgICAgICAgbGV0IGwgPSAoeCkgPT4gYXJyLmRhdGFbaSAqIG15Q2FudmFzLndpZHRoICogNCArIHggKiA0XTsgXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBteUNhbnZhcy53aWR0aDsgaisrKSB7XHJcbiAgICAgICAgICBpZiAobChqKSA9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICh2Lmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgIHYucHVzaChqKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgbGV0IHMgPSAodlt2Lmxlbmd0aCAtIDFdICogdlt2Lmxlbmd0aCAtIDFdIC0gaiAqIGopIC8gKDIgKiB2W3YubGVuZ3RoIC0gMV0gLSAyICogaik7XHJcbiAgICAgICAgICAgICAgaWYgKHMgPiB6W3oubGVuZ3RoIC0gMV0pIHtcclxuICAgICAgICAgICAgICAgIHoucHVzaChzKTtcclxuICAgICAgICAgICAgICAgIHYucHVzaChqKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgei5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHYucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBqLS07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBteUNhbnZhcy53aWR0aDsgaisrKSB7XHJcbiAgICAgICAgICBsZXQgayA9IDE7XHJcbiAgICAgICAgICB3aGlsZSAoaiA8IHpba10gJiYgayA8IHoubGVuZ3RoKVxyXG4gICAgICAgICAgICBrKys7XHJcblxyXG4gICAgICAgICAgYXJyLmRhdGFbaSAqIG15Q2FudmFzLndpZHRoICogNCArIGogKiA0XSA9IDEgLyAoKHZba10gLSBrKSAqICh2W2tdIC0gaykgKyAxKTtcclxuICAgICAgICAgIGFyci5kYXRhW2kgKiBteUNhbnZhcy53aWR0aCAqIDQgKyBqICogNCArIDFdID0gMSAvICgodltrXSAtIGspICogKHZba10gLSBrKSArIDEpO1xyXG4gICAgICAgICAgYXJyLmRhdGFbaSAqIG15Q2FudmFzLndpZHRoICogNCArIGogKiA0ICsgMl0gPSAxIC8gKCh2W2tdIC0gaykgKiAodltrXSAtIGspICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjbnR4LnB1dEltYWdlRGF0YShhcnIsIDAsIDApO1xyXG4gICAgfSAgICBcclxuICB9KVxyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztFQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTTtFQUN0QyxFQUFFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDekQsRUFBRSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE1BQU07RUFDN0MsSUFBSSxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMs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
